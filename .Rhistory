)
stopCluster(cl)
rm(cl)
return(res)
}
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
}
)
stopCluster(cl)
rm(cl)
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cnt <- cdnCount(cdns)
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
}
)
stopCluster(cl)
rm(cl)
res <- res[sapply(res, is.character)]
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cnt <- cdnCount(cdns)
cnt
str(cdns)
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
stopCluster(cl)
rm(cl)
res <- res[sapply(res, len) > 0]
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cnt <- cdnCount(cdns)
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
stopCluster(cl)
rm(cl)
res <- res[sapply(res, length) > 0]
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cnt <- cdnCount(cdns)
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
stopCluster(cl)
rm(cl)
res <- res[!sapply(res, is.null)]
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cnt <- cdnCount(cdns)
cdns[[1]]
cdns[[2352]]
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
stopCluster(cl)
rm(cl)
res <- res[!sapply(res, is.na)]
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cnt <- cdnCount(cdns)
fun <- function(dna, ...) {
res <- tryCatch(
{
as.character(codons(dna))
},
error = function(cond) {
return(NULL)
}
)
return(res)
}
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
stopCluster(cl)
rm(cl)
res <- res[!sapply(res, is.na)]
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
stopCluster(cl)
rm(cl)
res <- res[!sapply(res, is.null)]
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cnt <- cdnCount(cdns)
fun <- function(dna, ...) {
res <- tryCatch(
{
as.character(codons(dna))
},
error = function(cond) {
return(list())
}
)
return(res)
}
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
stopCluster(cl)
rm(cl)
res <- res[!sapply(res, is.null)]
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cnt <- cdnCount(cdns)
cdns[[2352]]
res <- parLapply(cl, x, function(datum) {
if(is.na(datum)) {
break
}
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
C
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
if(is.na(datum)) {
break
}
tb <- table(datum)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
stopCluster(cl)
rm(cl)
res <- res[!sapply(res, is.null)]
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cnt <- cdnCount(cdns)
?table
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum, useNA = 'no')
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
stopCluster(cl)
rm(cl)
res <- res[!sapply(res, is.null)]
data.table::rbindlist(res, use.names = TRUE, fill = TRUE, idcol = 'gene')
}
cnt <- cdnCount(cdns)
tb <- table(cdns[[2352]])
tb
nrow(tb)
length(tb)
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
tb
nrow(tb)
?rbindlist
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum, useNA = 'no')
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
return(tb)
})
stopCluster(cl)
rm(cl)
data.table::rbindlist(res, fill = TRUE, idcol = 'gene')
}
x <- cdnCount(cdns)
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
if(length(tb)) {
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
} else {
tb <- list(codon = NA_character_, count = NA)
}
return(tb)
})
stopCluster(cl)
rm(cl)
data.table::rbindlist(res, fill = TRUE, idcol = 'gene')
}
x <- cdnCount(cdns)
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
if(length(tb)) {
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
} else {
tb <- list(codon = NA_character_, count = NA_integer_)
}
return(tb)
})
stopCluster(cl)
rm(cl)
data.table::rbindlist(res, fill = TRUE, idcol = 'gene')
}
x <- cdnCount(cdns)
tb <- table(cdns[[1]])
tb
if(length(tb)) {
tb <- tibble::tibble(codon = names(tb), count = tb)
tb$count <- tb$count / sum(tb$count) * 100
} else {
tb <- list(codon = NA_character_, count = NA_integer_)
}
tb
tb <- table(cdns[[1]])
if(length(tb)) {
tb <- tibble::tibble(codon = names(tb), count = as.numeric(tb))
tb$count <- tb$count / sum(tb$count) * 100
} else {
tb <- list(codon = NA_character_, count = NA_integer_)
}
tb
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
if(length(tb)) {
tb <- tibble::tibble(codon = names(tb), count = as.numeric(tb))
tb$count <- tb$count / sum(tb$count) * 100
} else {
tb <- list(codon = NA_character_, count = NA_integer_)
}
return(tb)
})
stopCluster(cl)
rm(cl)
data.table::rbindlist(res, fill = TRUE, idcol = 'gene')
}
x <- cdnCount(cdns)
x
cdnCount <- function(x) {
ncores <- parallel::detectCores()
cl     <- makeCluster(ncores - 1)
res <- parLapply(cl, x, function(datum) {
tb <- table(datum)
if(length(tb)) {
tb <- tibble::tibble(codon = names(tb), count = as.numeric(tb))
} else {
tb <- list(codon = NA_character_, count = NA_integer_)
}
return(tb)
})
stopCluster(cl)
rm(cl)
data.table::rbindlist(res, fill = TRUE, idcol = 'gene')
}
x <- cdnCount(cdns)
x
by(x$count, x$codon, mean)
x
object.size(x)
format(object.size(x), 'Mb')
# utils
source('./src/r/utils.R')
# class definition -------------------------------------------------------------
setClass(
'Cub',
representation(
info  = 'character',
count = 'data.frame'
),
prototype(
info  = NA_character_,
count = data.frame()
)
)
setAs('DNAStringSet', 'Cub', function(from, to) {
cdns <- get_codons(from)
new(
'Cub',
info = NA_character_,
count = cdnCount(cdns)
)
})
x <- as(cds_pa14, 'Cub')
x <- as(dna_pa14, 'Cub')
x
setMethod('cub', signature('Cub'), function(x, method = 'total') {
if(by = 'none') {
setMethod('cub', signature('Cub'), function(x, method = 'total') {
if(method = 'none') {
setMethod('cub', signature('Cub'), function(x, method = 'total') {
if(method == 'none') {
res <- x@count %>%
group_by(gene) %>%
mutate(frequency = count / sum(count)) %>%
dplyr::select(gene, codon, frequency)
}
return(res)
})
setMethod('count', signature('Cub'), function(x, method = 'total') {
if(method == 'none') {
res <- x@count %>%
group_by(gene) %>%
mutate(frequency = count / sum(count)) %>%
dplyr::select(gene, codon, frequency)
}
return(res)
})
count(x)
setMethod('count', signature('Cub'), function(x, method = 'total') {
if(method == 'total') {
res <- x@count %>%
group_by(gene) %>%
mutate(frequency = count / sum(count)) %>%
dplyr::select(gene, codon, frequency)
}
return(res)
})
setGeneric("cub", function(object, ...) {
standardGeneric("cub")
})
setMethod('cub', signature('Cub'), function(x, method = 'total') {
if(method == 'total') {
res <- x@count %>%
group_by(gene) %>%
mutate(frequency = count / sum(count)) %>%
dplyr::select(gene, codon, frequency)
}
return(res)
})
setMethod('cub', signature('Cub'), function(object, method = 'total') {
if(method == 'total') {
res <- object@count %>%
group_by(gene) %>%
mutate(frequency = count / sum(count)) %>%
dplyr::select(gene, codon, frequency)
}
return(res)
})
cub(x)
res <- cub(x)
res <- cub(x)
dat <- res$frequency[res$codon == 'CTG']
dat
hist(res)
hist(dat)
mfrow(8, 8)
?mfrow
??mfrow
pr <- par()
par(mfrow = c(8, 8))
lapply(unique(res$codon), function(cdn) { hist(res$frequency[res$codone == cdn])})
frq <- split(res$frequency, res$codon)
lapply(frq, hist)
lapply(frq[1:8], hist)
pr
par(mfrow = c(3, 3))
lapply(frq[1:8], hist)
par(mfrow = c(4, 4))
lapply(frq[1:16], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(frq[16:32], hist)
lapply(names(frq[16:32]), function(x) {hist(freq[[x]], main = x))
lapply(names(frq[16:32]), function(x) {hist(freq[[x]], main = x)
)
lapply(names(frq[16:32]), function(x) {hist(freq[[x]], main = x})
lapply(names(frq[16:32]), function(x){ hist(freq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[16:32]), function(x){ hist(frq[[x]], main = x)})
par(mfrow = c(3, 3))
lapply(names(frq[32:41]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[32:41]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[32:41]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[32:41]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[32:41]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[32:41]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[32:41]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[32:41]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[32:41]), function(x){ hist(frq[[x]], main = x)})
GENETIC_CODE
GENETIC_CODE['GCC']
lapply(names(frq[names(frq) %in% names(GENETIC_CODE == 'A')]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[names(frq) %in% names(GENETIC_CODE == 'A')]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[names(frq) %in% names(GENETIC_CODE == 'A')]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[names(frq) %in% names(GENETIC_CODE == 'A')]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[names(frq) %in% names(GENETIC_CODE == 'A')]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[names(frq) %in% names(GENETIC_CODE == 'A')]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[names(frq) %in% names(GENETIC_CODE == 'A')]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[names(frq) %in% names(GENETIC_CODE == 'A')]), function(x){ hist(frq[[x]], main = x)})
lapply(names(frq[names(frq) %in% names(GENETIC_CODE == 'A')]), function(x){ hist(frq[[x]], main = x)})
names(freq)
names(frq)
al <- frq[names(frq) %in% names(GENETIC_CODE == 'A')]
al
length(al)
GENETIC_CODE
names(al)
length(al)
names(GENETIC_CODE == 'A')
names(GENETIC_CODE)[GENETIC_CODE == 'A']
al <- frq[names(GENETIC_CODE)[GENETIC_CODE == 'A']]
length(al)
par(mfrow(2, 2))
par(mfrow = c(2, 2))
lapply(al, hist)
lapply(names(al), \(x) hist(al[[x], main = x]))
lapply(names(al), \(x){ hist(al[[x], main = x])})
lapply(names(al), \(x){ hist(al[[x]], main = x)})
txdb_pao1 <- loadDb('./dat/gnm/sql/TxDb.Paeruginosa.ASM676v1.sqlite')
# Load libraried
library(parallel)
suppressPackageStartupMessages(library(BSgenome))
suppressPackageStartupMessages(library(GenomicFeatures))
suppressPackageStartupMessages(library(BSgenome.Paeruginosa.NCBI.ASM676v1))
suppressPackageStartupMessages(library(BSgenome.Paeruginosa.NCBI.ASM1462v1))
library(xlsx)
