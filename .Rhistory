#cl     <- parallel::makeCluster(ncores - 1)
res <- lapply(dna, function(datum) {
cdns <- .get_codons(datum)
if(length(cdns) == 1) {
return(cdns)
}
return(setNames(as.numeric(cnt), names(cnt)))
})
#parallel::stopCluster(cl)
#rm(cl)
return(res)
}
.count_codons(rrna)
.count_codons <- function(dna) {
#ncores <- parallel::detectCores()
#cl     <- parallel::makeCluster(ncores - 1)
res <- lapply(dna, function(datum) {
cdns <- .get_codons(datum)
if(length(cdns) == 1) {
return(cdns)
}
return(setNames(as.numeric(cdns), names(cdns)))
})
#parallel::stopCluster(cl)
#rm(cl)
return(res)
}
.count_codons(rrna)
setMethod(codons, signature('DNAStringSet'), function(object, cores, ...) {
# Tests for 'DNAStringSet or DNAString
if(missing(cores)) {
cores = parallel::detectCores() - 1
}
cl = parallel::makeCluster(cores)
res <- parallel::parLapply(cl = cl, object, fun = function(dna) {
cdns <- tryCatch(
{
as.character(codons(dna))
},
error = function(cond) {
return(c(NA_character_, attr = cond))
}
)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(cnt), names(cnt)))
}
return(cdns)
})
return(res)
})
setGeneric("codons", function(object, ...) {
standardGeneric("codons")
})
setMethod(codons, signature('DNAStringSet'), function(object, cores, ...) {
# Tests for 'DNAStringSet or DNAString
if(missing(cores)) {
cores = parallel::detectCores() - 1
}
cl = parallel::makeCluster(cores)
res <- parallel::parLapply(cl = cl, object, fun = function(dna) {
cdns <- tryCatch(
{
as.character(codons(dna))
},
error = function(cond) {
return(c(NA_character_, attr = cond))
}
)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(cnt), names(cnt)))
}
return(cdns)
})
return(res)
})
codons(rrna)
setMethod(codons, signature('DNAStringSet'), function(object, cores, ...) {
# Tests for 'DNAStringSet or DNAString
if(missing(cores)) {
cores = parallel::detectCores() - 1
}
cl = parallel::makeCluster(cores)
res <- parallel::parLapply(cl = cl, object, fun = function(dna) {
cdns <- tryCatch(
{
as.character(codons(dna))
},
error = function(cond) {
return(c(NA_character_, attr = cond))
}
)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
return(res)
})
codons(rrna)
setMethod(codons, signature('DNAStringSet'), function(object, cores, ...) {
# Tests for 'DNAStringSet or DNAString
if(missing(cores)) {
cores = parallel::detectCores() - 1
}
cl = parallel::makeCluster(cores)
res <- parallel::parLapply(cl = cl, object, fun = function(dna) {
cdns <- tryCatch(
{
as.character(codons(dna))
},
error = function(cond) {
return(c(NA_character_, attr = cond))
}
)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
parallel::stopCluster(cl)
rm(cl)
return(res)
})
x
x <- c(rrna)
x
# Load libraried
library(parallel)
suppressPackageStartupMessages(library(BSgenome))
suppressPackageStartupMessages(library(GenomicFeatures))
suppressPackageStartupMessages(library(BSgenome.Paeruginosa.NCBI.ASM676v1))
suppressPackageStartupMessages(library(BSgenome.Paeruginosa.NCBI.ASM1462v1))
library(xlsx)
# Load genomes
gnm_pao1 <- BSgenome.Paeruginosa.NCBI.ASM676v1
gnm_pa14 <- BSgenome.Paeruginosa.NCBI.ASM1462v1
# Load TxDb for both strains
txdb_pao1 <- loadDb('./dat/gnm/sql/TxDb.Paeruginosa.ASM676v1.sqlite')
txdb_pa14 <- loadDb('./dat/gnm/sql/TxDb.Paeruginosa.ASM1462v1.sqlite')
# extract CDS as granges
cds_pao1 <- cds(txdb_pao1, use.names = T)
cds_pa14 <- cds(txdb_pa14, use.names = T)
# # make views on genomes --------------------------------------------------------
#
# cds_pao1_views <- Views(gnm_pao1, cds_pao1)
# params <- new('BSParams', X = gnm_pao1, FUN = codons)
# cdns <- bsapply(params)
# extract CDS as a DNAStringSets
dna_pao1 <- getSeq(gnm_pao1, cds_pao1)
dna_pao1
x <- dna_pao1[1:8]
x
codons(x)
x <- dna_pao1[1:16]
codons(x)
cuts <- list(1:8, 1:16, 1:32, 1:64, 1:128, 1:256, 1:512, 1:1024)
cuts
?profile
library(profvis)
profvis({codons(x)})
library(lineprof)
install.packages(lineprof)
install.packages('lineprof')
devtools::install_github('hadley/lineprof')
library(lineprof)
l <- lineprof(codons(x))
l
x <- lapply(cuts, \(x) { dna_pao1[x]})
sapply(x, class)
f <- function() {
lapply(x, codons)
}
l <- lineprof(f())
l
l$time
View(l)
View(l[[5]][[38]])
system.time(cat('z'))
system.time(cat('z'))$elapsed
tm <- system.time(cat('z'))$elapsed
tm <- system.time(cat('z'))
tm
class(tm)
str(tm)
install.packages('microbenchmark')
microbenchmark::microbenchmark(codons(x[[1]]))
length(cuts)
fs <- lapply(cuts, \(x) {
function(x) {
dna <- dna_ao1[x]
function() {
codons(dna)
}
}
})
fs[[1]]
fs[[1]]()
fs <- lapply(cuts, \(x) {
function(x) {
dna <- dna_pao1[x]
function() {
codons(dna)
}
}
})
fs[[1]]()
lapply(cuts, \(x) { x})
lapply(cuts, \(x) { dna_pao1[x]})
lapply(cuts, \(x) { dna_pao1[[x]]})
fs
fs[[1]]()
provis({
codons(dna_pao1[cuts[[1]]])
codons(dna_pao1[cuts[[2]]])
})
profvis({
codons(dna_pao1[cuts[[1]]])
codons(dna_pao1[cuts[[2]]])
})
profvis({
codons(dna_pao1[cuts[[1]]])
codons(dna_pao1[cuts[[2]]])
})
res <- lapply(
cuts,
\(x) {
system.time(codons(dna_pao1[x]))
}
)
res
setMethod(codons, signature('DNAStringSet'), function(object, ...) {
# Tests for 'DNAStringSet or DNAString
res <- lapply(object, fun = function(dna) {
cdns <- tryCatch(
{
as.character(codons(dna))
},
error = function(cond) {
return(c(NA_character_, attr = cond))
}
)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
return(res)
})
res <- lapply(
cuts,
\(x) {
system.time(codons(dna_pao1[x]))
}
)
setMethod(codons, signature('DNAStringSet'), function(object, ...) {
# Tests for 'DNAStringSet or DNAString
res <- lapply(object, function(dna) {
cdns <- tryCatch(
{
as.character(codons(dna))
},
error = function(cond) {
return(c(NA_character_, attr = cond))
}
)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
return(res)
})
res <- lapply(
cuts,
\(x) {
system.time(codons(dna_pao1[x]))
}
)
setMethod(codons, signature('DNAStringSet'), function(object, ...) {
# Tests for 'DNAStringSet or DNAString
res <- lapply(object, function(dna) {
cdns <- tryCatch(
{
as.character(codons(dna))
},
error = function(cond) {
c(NA_character_, attr = cond)
}
)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
return(res)
})
res <- lapply(
cuts,
\(x) {
system.time(codons(dna_pao1[x]))
}
)
setMethod(codons, signature('DNAStringSet'), function(object, ...) {
# Tests for 'DNAStringSet or DNAString
res <- lapply(object, function(dna) {
cdns <- tryCatch(
{
as.character(codons(dna))
},
error = function(cond) {
c(NA_character_, attr = cond)
}
)
message(cdns)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
return(res)
})
res <- lapply(
cuts,
\(x) {
system.time(codons(dna_pao1[x]))
}
)
setMethod(codons, signature('DNAStringSet'), function(object, ...) {
# Tests for 'DNAStringSet or DNAString
res <- lapply(object, function(dna) {
cdns <- tryCatch(
{
as.character(Biostrins::codons(dna))
},
error = function(cond) {
c(NA_character_, attr = cond)
}
)
message(cdns)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
return(res)
})
res <- lapply(
cuts,
\(x) {
system.time(codons(dna_pao1[x]))
}
)
setMethod(codons, signature('DNAStringSet'), function(object, ...) {
# Tests for 'DNAStringSet or DNAString
res <- lapply(object, function(dna) {
cdns <- tryCatch(
{
as.character(Biostrigns::codons(dna))
},
error = function(cond) {
c(NA_character_, attr = cond)
}
)
message(cdns)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
return(res)
})
res <- lapply(
cuts,
\(x) {
system.time(codons(dna_pao1[x]))
}
)
setMethod(codons, signature('DNAStringSet'), function(object, ...) {
# Tests for 'DNAStringSet or DNAString
res <- lapply(object, function(dna) {
cdns <- tryCatch(
{
as.character(Biostrings::codons(dna))
},
error = function(cond) {
c(NA_character_, attr = cond)
}
)
message(cdns)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
return(res)
})
res <- lapply(
cuts,
\(x) {
system.time(codons(dna_pao1[x]))
}
)
res
res <- lapply(
cuts,
\(x) {
system.time(codons(dna_pao1[x]))
}
)
setMethod(codons, signature('DNAStringSet'), function(object, ...) {
# Tests for 'DNAStringSet or DNAString
res <- lapply(object, function(dna) {
cdns <- tryCatch(
{
as.character(Biostrings::codons(dna))
},
error = function(cond) {
c(NA_character_, attr = cond)
}
)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
return(res)
})
res <- lapply(
cuts,
\(x) {
system.time(codons(dna_pao1[x]))
}
)
res
dna <- dna_pao1[1:1000]
system.time(codons(dna))
profvis(codons(dna))
library(Rporf)
library(profvis)
profvis(codons(dna))
# Load libraried
library(parallel)
suppressPackageStartupMessages(library(BSgenome))
suppressPackageStartupMessages(library(GenomicFeatures))
suppressPackageStartupMessages(library(BSgenome.Paeruginosa.NCBI.ASM676v1))
suppressPackageStartupMessages(library(BSgenome.Paeruginosa.NCBI.ASM1462v1))
library(xlsx)
# Load genomes
gnm_pao1 <- BSgenome.Paeruginosa.NCBI.ASM676v1
gnm_pa14 <- BSgenome.Paeruginosa.NCBI.ASM1462v1
# Load TxDb for both strains
txdb_pao1 <- loadDb('./dat/gnm/sql/TxDb.Paeruginosa.ASM676v1.sqlite')
txdb_pa14 <- loadDb('./dat/gnm/sql/TxDb.Paeruginosa.ASM1462v1.sqlite')
# extract CDS as granges
cds_pao1 <- cds(txdb_pao1, use.names = T)
cds_pa14 <- cds(txdb_pa14, use.names = T)
# # make views on genomes --------------------------------------------------------
#
# cds_pao1_views <- Views(gnm_pao1, cds_pao1)
# params <- new('BSParams', X = gnm_pao1, FUN = codons)
# cdns <- bsapply(params)
# extract CDS as a DNAStringSets
dna_pao1 <- getSeq(gnm_pao1, cds_pao1)
dna <- dna_pao1[1:1000]
setGeneric("codons", function(object, ...) {
standardGeneric("codons")
})
setMethod(codons, signature('DNAStringSet'), function(object, ...) {
# Tests for 'DNAStringSet or DNAString
res <- lapply(object, function(dna) {
cdns <- tryCatch(
{
as.character(Biostrings::codons(dna))
},
error = function(cond) {
c(NA_character_, attr = cond)
}
)
if(length(cdns > 1)) {
count <- table(cdns)
return(setNames(as.numeric(count), names(count)))
}
return(cdns)
})
return(res)
})
library(profvis)
profvis(codons(dna))
codons(dna[1])
x <- c('AAA', 'AAC', 'AAA', 'ACA', 'AAC')
rle(x)
rle(c(1, 1, 2, 1, 1, 2))
?rle
x <- rev(rep(6:10, 1:5))
rle(x)
x
library(usethis)
?create_package
git branch -rl
create_package('/home/ubot/dev/cph/cub')
